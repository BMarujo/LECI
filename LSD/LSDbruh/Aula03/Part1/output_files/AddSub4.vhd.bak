library IEEE;
use IEEE.STD_LOGIC_1164.all;

entity Adder4 is
	port(In0, In1 : in std_logic_vector(3 downto 0);
		     sub   : in std_logic;
           sum   : out std_logic_vector(3 downto 0);
          cfin   : out std_logic);
end Adder4;

architecture Structural of Adder4 is
 -- Declare um sinal interno (carryOut) do tipo std_logic_vector (de
 -- C bits) que interligarÃ¡ os bits de carry dos somadores entre si
		signal carryOut : std_logic_vector(2 downto 0); 
begin
	bit0: entity work.FullAdder(Behavioral)
		port map(a => In0(0),
					b =>  In1(0) when (sub = '0') else not Int0(0),
				 cin => sub,
					s => sum(0),
				cout => carryOut(0));
 -- complete para os restantes bits (1 a 3)
 
	bit1: entity work.FullAdder(Behavioral)
		port map(a => In0(1),
					b =>  In1(1) when (sub = '0') else not Int0(1),
				 cin => carryOut(0),
					s => sum(1),
				cout => carryOut(1));
				
	bit2: entity work.FullAdder(Behavioral)
		port map(a => In0(2),
					b =>  In1(2) when (sub = '0') else not Int0(2),
				 cin => carryOut(1),
					s => sum(2),
				cout => carryOut(2));
	
	bit3: entity work.FullAdder(Behavioral)
		port map(a => In0(3),
					b =>  In1(3) when (sub = '0') else not Int0(3),
				 cin => carryOut(2),
					s => sum(3),
				cout => cfin);
end Structural; 