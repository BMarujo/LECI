|NexAluDemo
HEX0[0] <= NexAlu:inst.displayL[0]
HEX0[1] <= NexAlu:inst.displayL[1]
HEX0[2] <= NexAlu:inst.displayL[2]
HEX0[3] <= NexAlu:inst.displayL[3]
HEX0[4] <= NexAlu:inst.displayL[4]
HEX0[5] <= NexAlu:inst.displayL[5]
HEX0[6] <= NexAlu:inst.displayL[6]
SW[0] => NexAlu:inst.b[0]
SW[1] => NexAlu:inst.b[1]
SW[2] => NexAlu:inst.b[2]
SW[3] => NexAlu:inst.b[3]
SW[4] => NexAlu:inst.a[0]
SW[5] => NexAlu:inst.a[1]
SW[6] => NexAlu:inst.a[2]
SW[7] => NexAlu:inst.a[3]
SW[8] => NexAlu:inst.op[0]
SW[9] => NexAlu:inst.op[1]
SW[10] => NexAlu:inst.op[2]
HEX1[0] <= NexAlu:inst.displayH[0]
HEX1[1] <= NexAlu:inst.displayH[1]
HEX1[2] <= NexAlu:inst.displayH[2]
HEX1[3] <= NexAlu:inst.displayH[3]
HEX1[4] <= NexAlu:inst.displayH[4]
HEX1[5] <= NexAlu:inst.displayH[5]
HEX1[6] <= NexAlu:inst.displayH[6]
LEDR[0] <= NexAlu:inst.r[0]
LEDR[1] <= NexAlu:inst.r[1]
LEDR[2] <= NexAlu:inst.r[2]
LEDR[3] <= NexAlu:inst.r[3]
LEDR[4] <= NexAlu:inst.m[0]
LEDR[5] <= NexAlu:inst.m[1]
LEDR[6] <= NexAlu:inst.m[2]
LEDR[7] <= NexAlu:inst.m[3]


|NexAluDemo|NexAlu:inst
a[0] => Mult0.IN3
a[0] => Add0.IN4
a[0] => Add1.IN8
a[0] => Div0.IN3
a[0] => Mod0.IN3
a[0] => RESULT.IN0
a[0] => RESULT.IN0
a[0] => RESULT.IN0
a[1] => Mult0.IN2
a[1] => Add0.IN3
a[1] => Add1.IN7
a[1] => Div0.IN2
a[1] => Mod0.IN2
a[1] => RESULT.IN0
a[1] => RESULT.IN0
a[1] => RESULT.IN0
a[2] => Mult0.IN1
a[2] => Add0.IN2
a[2] => Add1.IN6
a[2] => Div0.IN1
a[2] => Mod0.IN1
a[2] => RESULT.IN0
a[2] => RESULT.IN0
a[2] => RESULT.IN0
a[3] => Mult0.IN0
a[3] => Add0.IN1
a[3] => Add1.IN5
a[3] => Div0.IN0
a[3] => Mod0.IN0
a[3] => RESULT.IN0
a[3] => RESULT.IN0
a[3] => RESULT.IN0
b[0] => Mult0.IN7
b[0] => Add0.IN8
b[0] => Div0.IN7
b[0] => Mod0.IN7
b[0] => RESULT.IN1
b[0] => RESULT.IN1
b[0] => RESULT.IN1
b[0] => Add1.IN4
b[1] => Mult0.IN6
b[1] => Add0.IN7
b[1] => Div0.IN6
b[1] => Mod0.IN6
b[1] => RESULT.IN1
b[1] => RESULT.IN1
b[1] => RESULT.IN1
b[1] => Add1.IN3
b[2] => Mult0.IN5
b[2] => Add0.IN6
b[2] => Div0.IN5
b[2] => Mod0.IN5
b[2] => RESULT.IN1
b[2] => RESULT.IN1
b[2] => RESULT.IN1
b[2] => Add1.IN2
b[3] => Mult0.IN4
b[3] => Add0.IN5
b[3] => Div0.IN4
b[3] => Mod0.IN4
b[3] => RESULT.IN1
b[3] => RESULT.IN1
b[3] => RESULT.IN1
b[3] => Add1.IN1
op[0] => Mux0.IN9
op[0] => Mux1.IN9
op[0] => Mux2.IN9
op[0] => Mux3.IN9
op[0] => Equal0.IN1
op[1] => Mux0.IN8
op[1] => Mux1.IN8
op[1] => Mux2.IN8
op[1] => Mux3.IN8
op[1] => Equal0.IN2
op[2] => Mux0.IN7
op[2] => Mux1.IN7
op[2] => Mux2.IN7
op[2] => Mux3.IN7
op[2] => Equal0.IN0
m[0] <= m.DB_MAX_OUTPUT_PORT_TYPE
m[1] <= m.DB_MAX_OUTPUT_PORT_TYPE
m[2] <= m.DB_MAX_OUTPUT_PORT_TYPE
m[3] <= m.DB_MAX_OUTPUT_PORT_TYPE
r[0] <= Mux3.DB_MAX_OUTPUT_PORT_TYPE
r[1] <= Mux2.DB_MAX_OUTPUT_PORT_TYPE
r[2] <= Mux1.DB_MAX_OUTPUT_PORT_TYPE
r[3] <= Mux0.DB_MAX_OUTPUT_PORT_TYPE
displayH[0] <= <VCC>
displayH[1] <= bcd[4].DB_MAX_OUTPUT_PORT_TYPE
displayH[2] <= bcd[4].DB_MAX_OUTPUT_PORT_TYPE
displayH[3] <= <VCC>
displayH[4] <= <VCC>
displayH[5] <= <VCC>
displayH[6] <= <VCC>
displayL[0] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[1] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[2] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[3] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[4] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[5] <= displayL.DB_MAX_OUTPUT_PORT_TYPE
displayL[6] <= displayL.DB_MAX_OUTPUT_PORT_TYPE


