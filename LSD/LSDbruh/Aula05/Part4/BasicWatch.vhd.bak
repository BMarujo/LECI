library ieee;
use ieee.std_logic_1164.all;

entity BasicWatch is
	port(clk : in std_logic;
		reset : in std_logic;
	  enable : in std_logic;
		start : in std_logic;
	nosei : out std_logic);
end BasicWatch;

architecture Behavioral of BasicWatch is
	signal clk_out: std_logic;
	signal timerOut: std_logic;
	signal sec-count: integer:= 0;
	signal min_count: integer:= 0;
	signal hor_count: integer:= 0;
begin
	FreqDivider entity work.FreqDivider(Behavioral)
		port map(clk=>clkIn,
					x"02FAF080"=>k,
					clk_out=>clkOUT);
	TimerN entity work.TimerN(Behavioral)
		generic map(K => 60)
		port map(clk_out=>clk,
					reset=>reset,
					enable=>enable,
					start=>start,
					timerOut=>timerOut);
	process(clkOUT,timerOut,min_count,hor_count)
		if(rising_edge(clk_out) then
			sec_count<= sec_count + 1;
		end if
		if(timerOut) then
			sec_count<= 0;
			min_count<= min_count + 1;
		end if
		if(min_count = 60) then
			min_count <= 0;
			hor_count <= hor_count + 1;
		end if
		if(hor_count = 24) then
			hor-count <= 0;
		end if
	end process
	
	BIN0 entity work.Bin7SegDecoder(Behavioral)
		port map(binInput =>
					enable=>enable
		
	
	
	
	